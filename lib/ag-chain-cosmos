#! /usr/bin/env node
//console.log('Starting Node');

require = require('esm')(module);

const { launch } = require('./launch-chain');

const agcc = require('bindings')('agcosmosdaemon.node');
//console.log('Have AG_COSMOS', agcc);

const portHandlers = {};
let lastPort = 0;
function registerPortHandler(portHandler) {
  const port = ++lastPort;
  portHandlers[port] = portHandler;
  return port;
}
function fromGo(port, str, replier) {
  const handler = portHandlers[port];
  if (!handler) {
    return replier.reject(`invalid requested port ${port}`);
  }
  const action = JSON.parse(str);
  const p = Promise.resolve(handler(action));
  p.then(res => replier.resolve(`${res}`),
         rej => replier.reject(`rejection ${rej} ignored`));
}

// Actually run the main ag-chain-cosmos program.  Before we start the daemon,
// there will be a call to nodePort/AG_COSMOS_INIT, otherwise exit.
const nodePort = registerPortHandler(toSwingSet);
agcc.runAG_COSMOS(nodePort, fromGo, process.argv.slice(1));

let deliverInbound;
async function toSwingSet(action, replier) {
  console.log(`toSwingSet`, action, replier);
  if (action.type === 'AG_COSMOS_INIT') {
    return true;
  }

  // Only start running for DELIVER_INBOUND.
  if (action.type !== 'DELIVER_INBOUND') {
    throw `Unknown action type ${action.type}`;
  }

  // todo: can this storagePort change for every single message?
  let sPort;

  if (action.storagePort) {
    // Initialize the storage for this particular transaction.
    sPort = action.storagePort;
  }

  // launch the swingset once
  if (!deliverInbound) {
    // this object is used to store the mailbox state. we only ever use
    // key='mailbox'
    const storage = {
      has(key) {
        return agcc.send(sPort, JSON.stringify({method: "has", key}));
      },
      set(key, value) {
        return agcc.send(sPort, JSON.stringify({method: "set", key, value}));
      },
      get(key) {
        return agcc.send(sPort, JSON.stringify({method: "get", key}));
      },
    };

    // this object is used by the kvstores and keepers for all other kernel
    // state
    const externalStorage = {
      sendMsg(msg) {
        return agcc.send(sPort, msg);
      },
    };

    const s = await launch(storage, externalStorage);
    deliverInbound = s.deliverInbound;
  }

  return await deliverInbound(action.peer, action.messages, action.ack);
}
